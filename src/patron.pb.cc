// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "patron.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* PatronInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatronInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PatronList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PatronList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_patron_2eproto() {
  protobuf_AddDesc_patron_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "patron.proto");
  GOOGLE_CHECK(file != NULL);
  PatronInfo_descriptor_ = file->message_type(0);
  static const int PatronInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, passangers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, pickup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, dropoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, notes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, timetaken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, timeassigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, timedone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, pid_),
  };
  PatronInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatronInfo_descriptor_,
      PatronInfo::default_instance_,
      PatronInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatronInfo));
  PatronList_descriptor_ = file->message_type(1);
  static const int PatronList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronList, patron_),
  };
  PatronList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PatronList_descriptor_,
      PatronList::default_instance_,
      PatronList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PatronList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PatronList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_patron_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatronInfo_descriptor_, &PatronInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PatronList_descriptor_, &PatronList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_patron_2eproto() {
  delete PatronInfo::default_instance_;
  delete PatronInfo_reflection_;
  delete PatronList::default_instance_;
  delete PatronList_reflection_;
}

void protobuf_AddDesc_patron_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014patron.proto\"\305\001\n\nPatronInfo\022\014\n\004name\030\001 "
    "\001(\t\022\022\n\npassangers\030\002 \001(\r\022\016\n\006pickup\030\003 \001(\t\022"
    "\017\n\007dropoff\030\004 \001(\t\022\r\n\005phone\030\005 \001(\t\022\016\n\006statu"
    "s\030\006 \001(\t\022\r\n\005notes\030\007 \001(\t\022\021\n\ttimetaken\030\010 \001("
    "\t\022\024\n\014timeassigned\030\t \001(\t\022\020\n\010timedone\030\n \001("
    "\t\022\013\n\003pid\030\013 \001(\005\")\n\nPatronList\022\033\n\006patron\030\001"
    " \003(\0132\013.PatronInfoB$\n\"edu.uconn.guarddogs"
    ".guardthebridge", 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "patron.proto", &protobuf_RegisterTypes);
  PatronInfo::default_instance_ = new PatronInfo();
  PatronList::default_instance_ = new PatronList();
  PatronInfo::default_instance_->InitAsDefaultInstance();
  PatronList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_patron_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_patron_2eproto {
  StaticDescriptorInitializer_patron_2eproto() {
    protobuf_AddDesc_patron_2eproto();
  }
} static_descriptor_initializer_patron_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PatronInfo::kNameFieldNumber;
const int PatronInfo::kPassangersFieldNumber;
const int PatronInfo::kPickupFieldNumber;
const int PatronInfo::kDropoffFieldNumber;
const int PatronInfo::kPhoneFieldNumber;
const int PatronInfo::kStatusFieldNumber;
const int PatronInfo::kNotesFieldNumber;
const int PatronInfo::kTimetakenFieldNumber;
const int PatronInfo::kTimeassignedFieldNumber;
const int PatronInfo::kTimedoneFieldNumber;
const int PatronInfo::kPidFieldNumber;
#endif  // !_MSC_VER

PatronInfo::PatronInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PatronInfo::InitAsDefaultInstance() {
}

PatronInfo::PatronInfo(const PatronInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PatronInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passangers_ = 0u;
  pickup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dropoff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timetaken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeassigned_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timedone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatronInfo::~PatronInfo() {
  SharedDtor();
}

void PatronInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pickup_ != &::google::protobuf::internal::kEmptyString) {
    delete pickup_;
  }
  if (dropoff_ != &::google::protobuf::internal::kEmptyString) {
    delete dropoff_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (notes_ != &::google::protobuf::internal::kEmptyString) {
    delete notes_;
  }
  if (timetaken_ != &::google::protobuf::internal::kEmptyString) {
    delete timetaken_;
  }
  if (timeassigned_ != &::google::protobuf::internal::kEmptyString) {
    delete timeassigned_;
  }
  if (timedone_ != &::google::protobuf::internal::kEmptyString) {
    delete timedone_;
  }
  if (this != default_instance_) {
  }
}

void PatronInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatronInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatronInfo_descriptor_;
}

const PatronInfo& PatronInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_patron_2eproto();  return *default_instance_;
}

PatronInfo* PatronInfo::default_instance_ = NULL;

PatronInfo* PatronInfo::New() const {
  return new PatronInfo;
}

void PatronInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    passangers_ = 0u;
    if (has_pickup()) {
      if (pickup_ != &::google::protobuf::internal::kEmptyString) {
        pickup_->clear();
      }
    }
    if (has_dropoff()) {
      if (dropoff_ != &::google::protobuf::internal::kEmptyString) {
        dropoff_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
    if (has_notes()) {
      if (notes_ != &::google::protobuf::internal::kEmptyString) {
        notes_->clear();
      }
    }
    if (has_timetaken()) {
      if (timetaken_ != &::google::protobuf::internal::kEmptyString) {
        timetaken_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_timeassigned()) {
      if (timeassigned_ != &::google::protobuf::internal::kEmptyString) {
        timeassigned_->clear();
      }
    }
    if (has_timedone()) {
      if (timedone_ != &::google::protobuf::internal::kEmptyString) {
        timedone_->clear();
      }
    }
    pid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatronInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_passangers;
        break;
      }
      
      // optional uint32 passangers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passangers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passangers_)));
          set_has_passangers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pickup;
        break;
      }
      
      // optional string pickup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pickup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pickup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pickup().data(), this->pickup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dropoff;
        break;
      }
      
      // optional string dropoff = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropoff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dropoff()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dropoff().data(), this->dropoff().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }
      
      // optional string phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_status;
        break;
      }
      
      // optional string status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_notes;
        break;
      }
      
      // optional string notes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notes().data(), this->notes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_timetaken;
        break;
      }
      
      // optional string timetaken = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timetaken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timetaken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timetaken().data(), this->timetaken().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_timeassigned;
        break;
      }
      
      // optional string timeassigned = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeassigned:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeassigned()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timeassigned().data(), this->timeassigned().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_timedone;
        break;
      }
      
      // optional string timedone = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timedone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timedone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timedone().data(), this->timedone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_pid;
        break;
      }
      
      // optional int32 pid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PatronInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional uint32 passangers = 2;
  if (has_passangers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->passangers(), output);
  }
  
  // optional string pickup = 3;
  if (has_pickup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pickup().data(), this->pickup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pickup(), output);
  }
  
  // optional string dropoff = 4;
  if (has_dropoff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dropoff().data(), this->dropoff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dropoff(), output);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phone(), output);
  }
  
  // optional string status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->status(), output);
  }
  
  // optional string notes = 7;
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->notes(), output);
  }
  
  // optional string timetaken = 8;
  if (has_timetaken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timetaken().data(), this->timetaken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->timetaken(), output);
  }
  
  // optional string timeassigned = 9;
  if (has_timeassigned()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeassigned().data(), this->timeassigned().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->timeassigned(), output);
  }
  
  // optional string timedone = 10;
  if (has_timedone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timedone().data(), this->timedone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->timedone(), output);
  }
  
  // optional int32 pid = 11;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PatronInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional uint32 passangers = 2;
  if (has_passangers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->passangers(), target);
  }
  
  // optional string pickup = 3;
  if (has_pickup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pickup().data(), this->pickup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pickup(), target);
  }
  
  // optional string dropoff = 4;
  if (has_dropoff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dropoff().data(), this->dropoff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dropoff(), target);
  }
  
  // optional string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }
  
  // optional string status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->status(), target);
  }
  
  // optional string notes = 7;
  if (has_notes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notes().data(), this->notes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->notes(), target);
  }
  
  // optional string timetaken = 8;
  if (has_timetaken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timetaken().data(), this->timetaken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timetaken(), target);
  }
  
  // optional string timeassigned = 9;
  if (has_timeassigned()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeassigned().data(), this->timeassigned().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->timeassigned(), target);
  }
  
  // optional string timedone = 10;
  if (has_timedone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timedone().data(), this->timedone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->timedone(), target);
  }
  
  // optional int32 pid = 11;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PatronInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional uint32 passangers = 2;
    if (has_passangers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passangers());
    }
    
    // optional string pickup = 3;
    if (has_pickup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pickup());
    }
    
    // optional string dropoff = 4;
    if (has_dropoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dropoff());
    }
    
    // optional string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }
    
    // optional string status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }
    
    // optional string notes = 7;
    if (has_notes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notes());
    }
    
    // optional string timetaken = 8;
    if (has_timetaken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timetaken());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string timeassigned = 9;
    if (has_timeassigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeassigned());
    }
    
    // optional string timedone = 10;
    if (has_timedone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timedone());
    }
    
    // optional int32 pid = 11;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatronInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatronInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatronInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatronInfo::MergeFrom(const PatronInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_passangers()) {
      set_passangers(from.passangers());
    }
    if (from.has_pickup()) {
      set_pickup(from.pickup());
    }
    if (from.has_dropoff()) {
      set_dropoff(from.dropoff());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_notes()) {
      set_notes(from.notes());
    }
    if (from.has_timetaken()) {
      set_timetaken(from.timetaken());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timeassigned()) {
      set_timeassigned(from.timeassigned());
    }
    if (from.has_timedone()) {
      set_timedone(from.timedone());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatronInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatronInfo::CopyFrom(const PatronInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatronInfo::IsInitialized() const {
  
  return true;
}

void PatronInfo::Swap(PatronInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(passangers_, other->passangers_);
    std::swap(pickup_, other->pickup_);
    std::swap(dropoff_, other->dropoff_);
    std::swap(phone_, other->phone_);
    std::swap(status_, other->status_);
    std::swap(notes_, other->notes_);
    std::swap(timetaken_, other->timetaken_);
    std::swap(timeassigned_, other->timeassigned_);
    std::swap(timedone_, other->timedone_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatronInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatronInfo_descriptor_;
  metadata.reflection = PatronInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PatronList::kPatronFieldNumber;
#endif  // !_MSC_VER

PatronList::PatronList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PatronList::InitAsDefaultInstance() {
}

PatronList::PatronList(const PatronList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PatronList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PatronList::~PatronList() {
  SharedDtor();
}

void PatronList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PatronList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PatronList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PatronList_descriptor_;
}

const PatronList& PatronList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_patron_2eproto();  return *default_instance_;
}

PatronList* PatronList::default_instance_ = NULL;

PatronList* PatronList::New() const {
  return new PatronList;
}

void PatronList::Clear() {
  patron_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PatronList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PatronInfo patron = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patron:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patron()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_patron;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PatronList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PatronInfo patron = 1;
  for (int i = 0; i < this->patron_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->patron(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PatronList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PatronInfo patron = 1;
  for (int i = 0; i < this->patron_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->patron(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PatronList::ByteSize() const {
  int total_size = 0;
  
  // repeated .PatronInfo patron = 1;
  total_size += 1 * this->patron_size();
  for (int i = 0; i < this->patron_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patron(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PatronList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PatronList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PatronList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PatronList::MergeFrom(const PatronList& from) {
  GOOGLE_CHECK_NE(&from, this);
  patron_.MergeFrom(from.patron_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PatronList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatronList::CopyFrom(const PatronList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatronList::IsInitialized() const {
  
  return true;
}

void PatronList::Swap(PatronList* other) {
  if (other != this) {
    patron_.Swap(&other->patron_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PatronList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PatronList_descriptor_;
  metadata.reflection = PatronList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
