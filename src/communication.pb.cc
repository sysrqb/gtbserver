// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "communication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_communication_2eproto() {
  protobuf_AddDesc_communication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "communication.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, nreqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sreqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, ncarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, nparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, plpatronlist_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, nrespid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sresvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, sresadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, nresadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, plpatronlist_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_communication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_communication_2eproto() {
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_communication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_patron_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023communication.proto\032\014patron.proto\"\204\001\n\007"
    "Request\022\016\n\006nReqId\030\001 \002(\005\022\020\n\010sReqType\030\002 \002("
    "\t\022\016\n\006nCarId\030\003 \001(\005\022\017\n\007sParams\030\004 \003(\t\022\023\n\007nP"
    "arams\030\005 \003(\005B\002\020\001\022!\n\014plPatronList\030\006 \001(\0132\013."
    "PatronList\"w\n\010Response\022\017\n\007nRespId\030\001 \002(\005\022"
    "\021\n\tsResValue\030\002 \002(\t\022\017\n\007sResAdd\030\003 \003(\t\022\023\n\007n"
    "ResAdd\030\004 \003(\005B\002\020\001\022!\n\014plPatronList\030\005 \001(\0132\013"
    ".PatronListB$\n\"edu.uconn.guarddogs.guard"
    "thebridge", 329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "communication.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_communication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_communication_2eproto {
  StaticDescriptorInitializer_communication_2eproto() {
    protobuf_AddDesc_communication_2eproto();
  }
} static_descriptor_initializer_communication_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Request::kNReqIdFieldNumber;
const int Request::kSReqTypeFieldNumber;
const int Request::kNCarIdFieldNumber;
const int Request::kSParamsFieldNumber;
const int Request::kNParamsFieldNumber;
const int Request::kPlPatronListFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Request::InitAsDefaultInstance() {
  plpatronlist_ = const_cast< ::PatronList*>(&::PatronList::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  nreqid_ = 0;
  sreqtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ncarid_ = 0;
  plpatronlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  SharedDtor();
}

void Request::SharedDtor() {
  if (sreqtype_ != &::google::protobuf::internal::kEmptyString) {
    delete sreqtype_;
  }
  if (this != default_instance_) {
    delete plpatronlist_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nreqid_ = 0;
    if (has_sreqtype()) {
      if (sreqtype_ != &::google::protobuf::internal::kEmptyString) {
        sreqtype_->clear();
      }
    }
    ncarid_ = 0;
    if (has_plpatronlist()) {
      if (plpatronlist_ != NULL) plpatronlist_->::PatronList::Clear();
    }
  }
  sparams_.Clear();
  nparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nReqId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nreqid_)));
          set_has_nreqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sReqType;
        break;
      }
      
      // required string sReqType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sReqType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sreqtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sreqtype().data(), this->sreqtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nCarId;
        break;
      }
      
      // optional int32 nCarId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCarId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncarid_)));
          set_has_ncarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sParams;
        break;
      }
      
      // repeated string sParams = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sparams(0).data(), this->sparams(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sParams;
        if (input->ExpectTag(42)) goto parse_nParams;
        break;
      }
      
      // repeated int32 nParams = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nParams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nparams())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_nparams())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_plPatronList;
        break;
      }
      
      // optional .PatronList plPatronList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plPatronList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plpatronlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nReqId = 1;
  if (has_nreqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nreqid(), output);
  }
  
  // required string sReqType = 2;
  if (has_sreqtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sreqtype().data(), this->sreqtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sreqtype(), output);
  }
  
  // optional int32 nCarId = 3;
  if (has_ncarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncarid(), output);
  }
  
  // repeated string sParams = 4;
  for (int i = 0; i < this->sparams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sparams(i).data(), this->sparams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sparams(i), output);
  }
  
  // repeated int32 nParams = 5 [packed = true];
  if (this->nparams_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nparams_cached_byte_size_);
  }
  for (int i = 0; i < this->nparams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->nparams(i), output);
  }
  
  // optional .PatronList plPatronList = 6;
  if (has_plpatronlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->plpatronlist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nReqId = 1;
  if (has_nreqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nreqid(), target);
  }
  
  // required string sReqType = 2;
  if (has_sreqtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sreqtype().data(), this->sreqtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sreqtype(), target);
  }
  
  // optional int32 nCarId = 3;
  if (has_ncarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ncarid(), target);
  }
  
  // repeated string sParams = 4;
  for (int i = 0; i < this->sparams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sparams(i).data(), this->sparams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->sparams(i), target);
  }
  
  // repeated int32 nParams = 5 [packed = true];
  if (this->nparams_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nparams_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nparams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->nparams(i), target);
  }
  
  // optional .PatronList plPatronList = 6;
  if (has_plpatronlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->plpatronlist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nReqId = 1;
    if (has_nreqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nreqid());
    }
    
    // required string sReqType = 2;
    if (has_sreqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sreqtype());
    }
    
    // optional int32 nCarId = 3;
    if (has_ncarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncarid());
    }
    
    // optional .PatronList plPatronList = 6;
    if (has_plpatronlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plpatronlist());
    }
    
  }
  // repeated string sParams = 4;
  total_size += 1 * this->sparams_size();
  for (int i = 0; i < this->sparams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sparams(i));
  }
  
  // repeated int32 nParams = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nparams_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nparams(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _nparams_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  sparams_.MergeFrom(from.sparams_);
  nparams_.MergeFrom(from.nparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nreqid()) {
      set_nreqid(from.nreqid());
    }
    if (from.has_sreqtype()) {
      set_sreqtype(from.sreqtype());
    }
    if (from.has_ncarid()) {
      set_ncarid(from.ncarid());
    }
    if (from.has_plpatronlist()) {
      mutable_plpatronlist()->::PatronList::MergeFrom(from.plpatronlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(nreqid_, other->nreqid_);
    std::swap(sreqtype_, other->sreqtype_);
    std::swap(ncarid_, other->ncarid_);
    sparams_.Swap(&other->sparams_);
    nparams_.Swap(&other->nparams_);
    std::swap(plpatronlist_, other->plpatronlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kNRespIdFieldNumber;
const int Response::kSResValueFieldNumber;
const int Response::kSResAddFieldNumber;
const int Response::kNResAddFieldNumber;
const int Response::kPlPatronListFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Response::InitAsDefaultInstance() {
  plpatronlist_ = const_cast< ::PatronList*>(&::PatronList::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  nrespid_ = 0;
  sresvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plpatronlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  SharedDtor();
}

void Response::SharedDtor() {
  if (sresvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete sresvalue_;
  }
  if (this != default_instance_) {
    delete plpatronlist_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_communication_2eproto();  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nrespid_ = 0;
    if (has_sresvalue()) {
      if (sresvalue_ != &::google::protobuf::internal::kEmptyString) {
        sresvalue_->clear();
      }
    }
    if (has_plpatronlist()) {
      if (plpatronlist_ != NULL) plpatronlist_->::PatronList::Clear();
    }
  }
  sresadd_.Clear();
  nresadd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nRespId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrespid_)));
          set_has_nrespid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sResValue;
        break;
      }
      
      // required string sResValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sResValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sresvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sresvalue().data(), this->sresvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sResAdd;
        break;
      }
      
      // repeated string sResAdd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sResAdd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sresadd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sresadd(0).data(), this->sresadd(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sResAdd;
        if (input->ExpectTag(34)) goto parse_nResAdd;
        break;
      }
      
      // repeated int32 nResAdd = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nResAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nresadd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_nresadd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_plPatronList;
        break;
      }
      
      // optional .PatronList plPatronList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plPatronList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plpatronlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nRespId = 1;
  if (has_nrespid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nrespid(), output);
  }
  
  // required string sResValue = 2;
  if (has_sresvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sresvalue().data(), this->sresvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sresvalue(), output);
  }
  
  // repeated string sResAdd = 3;
  for (int i = 0; i < this->sresadd_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sresadd(i).data(), this->sresadd(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sresadd(i), output);
  }
  
  // repeated int32 nResAdd = 4 [packed = true];
  if (this->nresadd_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nresadd_cached_byte_size_);
  }
  for (int i = 0; i < this->nresadd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->nresadd(i), output);
  }
  
  // optional .PatronList plPatronList = 5;
  if (has_plpatronlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->plpatronlist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nRespId = 1;
  if (has_nrespid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nrespid(), target);
  }
  
  // required string sResValue = 2;
  if (has_sresvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sresvalue().data(), this->sresvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sresvalue(), target);
  }
  
  // repeated string sResAdd = 3;
  for (int i = 0; i < this->sresadd_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sresadd(i).data(), this->sresadd(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->sresadd(i), target);
  }
  
  // repeated int32 nResAdd = 4 [packed = true];
  if (this->nresadd_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _nresadd_cached_byte_size_, target);
  }
  for (int i = 0; i < this->nresadd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->nresadd(i), target);
  }
  
  // optional .PatronList plPatronList = 5;
  if (has_plpatronlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->plpatronlist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nRespId = 1;
    if (has_nrespid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrespid());
    }
    
    // required string sResValue = 2;
    if (has_sresvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sresvalue());
    }
    
    // optional .PatronList plPatronList = 5;
    if (has_plpatronlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plpatronlist());
    }
    
  }
  // repeated string sResAdd = 3;
  total_size += 1 * this->sresadd_size();
  for (int i = 0; i < this->sresadd_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sresadd(i));
  }
  
  // repeated int32 nResAdd = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->nresadd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nresadd(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _nresadd_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  sresadd_.MergeFrom(from.sresadd_);
  nresadd_.MergeFrom(from.nresadd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nrespid()) {
      set_nrespid(from.nrespid());
    }
    if (from.has_sresvalue()) {
      set_sresvalue(from.sresvalue());
    }
    if (from.has_plpatronlist()) {
      mutable_plpatronlist()->::PatronList::MergeFrom(from.plpatronlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(nrespid_, other->nrespid_);
    std::swap(sresvalue_, other->sresvalue_);
    sresadd_.Swap(&other->sresadd_);
    nresadd_.Swap(&other->nresadd_);
    std::swap(plpatronlist_, other->plpatronlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
