// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: patron.proto

#ifndef PROTOBUF_patron_2eproto__INCLUDED
#define PROTOBUF_patron_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_patron_2eproto();
void protobuf_AssignDesc_patron_2eproto();
void protobuf_ShutdownFile_patron_2eproto();

class PatronInfo;
class PatronList;

// ===================================================================

class PatronInfo : public ::google::protobuf::Message {
 public:
  PatronInfo();
  virtual ~PatronInfo();
  
  PatronInfo(const PatronInfo& from);
  
  inline PatronInfo& operator=(const PatronInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatronInfo& default_instance();
  
  void Swap(PatronInfo* other);
  
  // implements Message ----------------------------------------------
  
  PatronInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PatronInfo& from);
  void MergeFrom(const PatronInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional uint32 passangers = 2;
  inline bool has_passangers() const;
  inline void clear_passangers();
  static const int kPassangersFieldNumber = 2;
  inline ::google::protobuf::uint32 passangers() const;
  inline void set_passangers(::google::protobuf::uint32 value);
  
  // optional string pickup = 3;
  inline bool has_pickup() const;
  inline void clear_pickup();
  static const int kPickupFieldNumber = 3;
  inline const ::std::string& pickup() const;
  inline void set_pickup(const ::std::string& value);
  inline void set_pickup(const char* value);
  inline void set_pickup(const char* value, size_t size);
  inline ::std::string* mutable_pickup();
  inline ::std::string* release_pickup();
  
  // optional string dropoff = 4;
  inline bool has_dropoff() const;
  inline void clear_dropoff();
  static const int kDropoffFieldNumber = 4;
  inline const ::std::string& dropoff() const;
  inline void set_dropoff(const ::std::string& value);
  inline void set_dropoff(const char* value);
  inline void set_dropoff(const char* value, size_t size);
  inline ::std::string* mutable_dropoff();
  inline ::std::string* release_dropoff();
  
  // optional string phone = 5;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 5;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  
  // optional string status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string notes = 7;
  inline bool has_notes() const;
  inline void clear_notes();
  static const int kNotesFieldNumber = 7;
  inline const ::std::string& notes() const;
  inline void set_notes(const ::std::string& value);
  inline void set_notes(const char* value);
  inline void set_notes(const char* value, size_t size);
  inline ::std::string* mutable_notes();
  inline ::std::string* release_notes();
  
  // optional string timetaken = 8;
  inline bool has_timetaken() const;
  inline void clear_timetaken();
  static const int kTimetakenFieldNumber = 8;
  inline const ::std::string& timetaken() const;
  inline void set_timetaken(const ::std::string& value);
  inline void set_timetaken(const char* value);
  inline void set_timetaken(const char* value, size_t size);
  inline ::std::string* mutable_timetaken();
  inline ::std::string* release_timetaken();
  
  // optional string timeassigned = 9;
  inline bool has_timeassigned() const;
  inline void clear_timeassigned();
  static const int kTimeassignedFieldNumber = 9;
  inline const ::std::string& timeassigned() const;
  inline void set_timeassigned(const ::std::string& value);
  inline void set_timeassigned(const char* value);
  inline void set_timeassigned(const char* value, size_t size);
  inline ::std::string* mutable_timeassigned();
  inline ::std::string* release_timeassigned();
  
  // optional string timedone = 10;
  inline bool has_timedone() const;
  inline void clear_timedone();
  static const int kTimedoneFieldNumber = 10;
  inline const ::std::string& timedone() const;
  inline void set_timedone(const ::std::string& value);
  inline void set_timedone(const char* value);
  inline void set_timedone(const char* value, size_t size);
  inline ::std::string* mutable_timedone();
  inline ::std::string* release_timedone();
  
  // optional int32 pid = 11;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 11;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PatronInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_passangers();
  inline void clear_has_passangers();
  inline void set_has_pickup();
  inline void clear_has_pickup();
  inline void set_has_dropoff();
  inline void clear_has_dropoff();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_notes();
  inline void clear_has_notes();
  inline void set_has_timetaken();
  inline void clear_has_timetaken();
  inline void set_has_timeassigned();
  inline void clear_has_timeassigned();
  inline void set_has_timedone();
  inline void clear_has_timedone();
  inline void set_has_pid();
  inline void clear_has_pid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* pickup_;
  ::std::string* dropoff_;
  ::std::string* phone_;
  ::std::string* status_;
  ::google::protobuf::uint32 passangers_;
  ::google::protobuf::int32 pid_;
  ::std::string* notes_;
  ::std::string* timetaken_;
  ::std::string* timeassigned_;
  ::std::string* timedone_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_patron_2eproto();
  friend void protobuf_AssignDesc_patron_2eproto();
  friend void protobuf_ShutdownFile_patron_2eproto();
  
  void InitAsDefaultInstance();
  static PatronInfo* default_instance_;
};
// -------------------------------------------------------------------

class PatronList : public ::google::protobuf::Message {
 public:
  PatronList();
  virtual ~PatronList();
  
  PatronList(const PatronList& from);
  
  inline PatronList& operator=(const PatronList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatronList& default_instance();
  
  void Swap(PatronList* other);
  
  // implements Message ----------------------------------------------
  
  PatronList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PatronList& from);
  void MergeFrom(const PatronList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PatronInfo patron = 1;
  inline int patron_size() const;
  inline void clear_patron();
  static const int kPatronFieldNumber = 1;
  inline const ::PatronInfo& patron(int index) const;
  inline ::PatronInfo* mutable_patron(int index);
  inline ::PatronInfo* add_patron();
  inline const ::google::protobuf::RepeatedPtrField< ::PatronInfo >&
      patron() const;
  inline ::google::protobuf::RepeatedPtrField< ::PatronInfo >*
      mutable_patron();
  
  // @@protoc_insertion_point(class_scope:PatronList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PatronInfo > patron_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_patron_2eproto();
  friend void protobuf_AssignDesc_patron_2eproto();
  friend void protobuf_ShutdownFile_patron_2eproto();
  
  void InitAsDefaultInstance();
  static PatronList* default_instance_;
};
// ===================================================================


// ===================================================================

// PatronInfo

// optional string name = 1;
inline bool PatronInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PatronInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PatronInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PatronInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PatronInfo::name() const {
  return *name_;
}
inline void PatronInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PatronInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PatronInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PatronInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PatronInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 passangers = 2;
inline bool PatronInfo::has_passangers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PatronInfo::set_has_passangers() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PatronInfo::clear_has_passangers() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PatronInfo::clear_passangers() {
  passangers_ = 0u;
  clear_has_passangers();
}
inline ::google::protobuf::uint32 PatronInfo::passangers() const {
  return passangers_;
}
inline void PatronInfo::set_passangers(::google::protobuf::uint32 value) {
  set_has_passangers();
  passangers_ = value;
}

// optional string pickup = 3;
inline bool PatronInfo::has_pickup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PatronInfo::set_has_pickup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PatronInfo::clear_has_pickup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PatronInfo::clear_pickup() {
  if (pickup_ != &::google::protobuf::internal::kEmptyString) {
    pickup_->clear();
  }
  clear_has_pickup();
}
inline const ::std::string& PatronInfo::pickup() const {
  return *pickup_;
}
inline void PatronInfo::set_pickup(const ::std::string& value) {
  set_has_pickup();
  if (pickup_ == &::google::protobuf::internal::kEmptyString) {
    pickup_ = new ::std::string;
  }
  pickup_->assign(value);
}
inline void PatronInfo::set_pickup(const char* value) {
  set_has_pickup();
  if (pickup_ == &::google::protobuf::internal::kEmptyString) {
    pickup_ = new ::std::string;
  }
  pickup_->assign(value);
}
inline void PatronInfo::set_pickup(const char* value, size_t size) {
  set_has_pickup();
  if (pickup_ == &::google::protobuf::internal::kEmptyString) {
    pickup_ = new ::std::string;
  }
  pickup_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PatronInfo::mutable_pickup() {
  set_has_pickup();
  if (pickup_ == &::google::protobuf::internal::kEmptyString) {
    pickup_ = new ::std::string;
  }
  return pickup_;
}
inline ::std::string* PatronInfo::release_pickup() {
  clear_has_pickup();
  if (pickup_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pickup_;
    pickup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dropoff = 4;
inline bool PatronInfo::has_dropoff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PatronInfo::set_has_dropoff() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PatronInfo::clear_has_dropoff() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PatronInfo::clear_dropoff() {
  if (dropoff_ != &::google::protobuf::internal::kEmptyString) {
    dropoff_->clear();
  }
  clear_has_dropoff();
}
inline const ::std::string& PatronInfo::dropoff() const {
  return *dropoff_;
}
inline void PatronInfo::set_dropoff(const ::std::string& value) {
  set_has_dropoff();
  if (dropoff_ == &::google::protobuf::internal::kEmptyString) {
    dropoff_ = new ::std::string;
  }
  dropoff_->assign(value);
}
inline void PatronInfo::set_dropoff(const char* value) {
  set_has_dropoff();
  if (dropoff_ == &::google::protobuf::internal::kEmptyString) {
    dropoff_ = new ::std::string;
  }
  dropoff_->assign(value);
}
inline void PatronInfo::set_dropoff(const char* value, size_t size) {
  set_has_dropoff();
  if (dropoff_ == &::google::protobuf::internal::kEmptyString) {
    dropoff_ = new ::std::string;
  }
  dropoff_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PatronInfo::mutable_dropoff() {
  set_has_dropoff();
  if (dropoff_ == &::google::protobuf::internal::kEmptyString) {
    dropoff_ = new ::std::string;
  }
  return dropoff_;
}
inline ::std::string* PatronInfo::release_dropoff() {
  clear_has_dropoff();
  if (dropoff_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dropoff_;
    dropoff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string phone = 5;
inline bool PatronInfo::has_phone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PatronInfo::set_has_phone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PatronInfo::clear_has_phone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PatronInfo::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& PatronInfo::phone() const {
  return *phone_;
}
inline void PatronInfo::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void PatronInfo::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void PatronInfo::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PatronInfo::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* PatronInfo::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string status = 6;
inline bool PatronInfo::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PatronInfo::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PatronInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PatronInfo::clear_status() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& PatronInfo::status() const {
  return *status_;
}
inline void PatronInfo::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void PatronInfo::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(value);
}
inline void PatronInfo::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PatronInfo::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    status_ = new ::std::string;
  }
  return status_;
}
inline ::std::string* PatronInfo::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string notes = 7;
inline bool PatronInfo::has_notes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PatronInfo::set_has_notes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PatronInfo::clear_has_notes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PatronInfo::clear_notes() {
  if (notes_ != &::google::protobuf::internal::kEmptyString) {
    notes_->clear();
  }
  clear_has_notes();
}
inline const ::std::string& PatronInfo::notes() const {
  return *notes_;
}
inline void PatronInfo::set_notes(const ::std::string& value) {
  set_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    notes_ = new ::std::string;
  }
  notes_->assign(value);
}
inline void PatronInfo::set_notes(const char* value) {
  set_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    notes_ = new ::std::string;
  }
  notes_->assign(value);
}
inline void PatronInfo::set_notes(const char* value, size_t size) {
  set_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    notes_ = new ::std::string;
  }
  notes_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PatronInfo::mutable_notes() {
  set_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    notes_ = new ::std::string;
  }
  return notes_;
}
inline ::std::string* PatronInfo::release_notes() {
  clear_has_notes();
  if (notes_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notes_;
    notes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string timetaken = 8;
inline bool PatronInfo::has_timetaken() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PatronInfo::set_has_timetaken() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PatronInfo::clear_has_timetaken() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PatronInfo::clear_timetaken() {
  if (timetaken_ != &::google::protobuf::internal::kEmptyString) {
    timetaken_->clear();
  }
  clear_has_timetaken();
}
inline const ::std::string& PatronInfo::timetaken() const {
  return *timetaken_;
}
inline void PatronInfo::set_timetaken(const ::std::string& value) {
  set_has_timetaken();
  if (timetaken_ == &::google::protobuf::internal::kEmptyString) {
    timetaken_ = new ::std::string;
  }
  timetaken_->assign(value);
}
inline void PatronInfo::set_timetaken(const char* value) {
  set_has_timetaken();
  if (timetaken_ == &::google::protobuf::internal::kEmptyString) {
    timetaken_ = new ::std::string;
  }
  timetaken_->assign(value);
}
inline void PatronInfo::set_timetaken(const char* value, size_t size) {
  set_has_timetaken();
  if (timetaken_ == &::google::protobuf::internal::kEmptyString) {
    timetaken_ = new ::std::string;
  }
  timetaken_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PatronInfo::mutable_timetaken() {
  set_has_timetaken();
  if (timetaken_ == &::google::protobuf::internal::kEmptyString) {
    timetaken_ = new ::std::string;
  }
  return timetaken_;
}
inline ::std::string* PatronInfo::release_timetaken() {
  clear_has_timetaken();
  if (timetaken_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timetaken_;
    timetaken_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string timeassigned = 9;
inline bool PatronInfo::has_timeassigned() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PatronInfo::set_has_timeassigned() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PatronInfo::clear_has_timeassigned() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PatronInfo::clear_timeassigned() {
  if (timeassigned_ != &::google::protobuf::internal::kEmptyString) {
    timeassigned_->clear();
  }
  clear_has_timeassigned();
}
inline const ::std::string& PatronInfo::timeassigned() const {
  return *timeassigned_;
}
inline void PatronInfo::set_timeassigned(const ::std::string& value) {
  set_has_timeassigned();
  if (timeassigned_ == &::google::protobuf::internal::kEmptyString) {
    timeassigned_ = new ::std::string;
  }
  timeassigned_->assign(value);
}
inline void PatronInfo::set_timeassigned(const char* value) {
  set_has_timeassigned();
  if (timeassigned_ == &::google::protobuf::internal::kEmptyString) {
    timeassigned_ = new ::std::string;
  }
  timeassigned_->assign(value);
}
inline void PatronInfo::set_timeassigned(const char* value, size_t size) {
  set_has_timeassigned();
  if (timeassigned_ == &::google::protobuf::internal::kEmptyString) {
    timeassigned_ = new ::std::string;
  }
  timeassigned_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PatronInfo::mutable_timeassigned() {
  set_has_timeassigned();
  if (timeassigned_ == &::google::protobuf::internal::kEmptyString) {
    timeassigned_ = new ::std::string;
  }
  return timeassigned_;
}
inline ::std::string* PatronInfo::release_timeassigned() {
  clear_has_timeassigned();
  if (timeassigned_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timeassigned_;
    timeassigned_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string timedone = 10;
inline bool PatronInfo::has_timedone() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PatronInfo::set_has_timedone() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PatronInfo::clear_has_timedone() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PatronInfo::clear_timedone() {
  if (timedone_ != &::google::protobuf::internal::kEmptyString) {
    timedone_->clear();
  }
  clear_has_timedone();
}
inline const ::std::string& PatronInfo::timedone() const {
  return *timedone_;
}
inline void PatronInfo::set_timedone(const ::std::string& value) {
  set_has_timedone();
  if (timedone_ == &::google::protobuf::internal::kEmptyString) {
    timedone_ = new ::std::string;
  }
  timedone_->assign(value);
}
inline void PatronInfo::set_timedone(const char* value) {
  set_has_timedone();
  if (timedone_ == &::google::protobuf::internal::kEmptyString) {
    timedone_ = new ::std::string;
  }
  timedone_->assign(value);
}
inline void PatronInfo::set_timedone(const char* value, size_t size) {
  set_has_timedone();
  if (timedone_ == &::google::protobuf::internal::kEmptyString) {
    timedone_ = new ::std::string;
  }
  timedone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PatronInfo::mutable_timedone() {
  set_has_timedone();
  if (timedone_ == &::google::protobuf::internal::kEmptyString) {
    timedone_ = new ::std::string;
  }
  return timedone_;
}
inline ::std::string* PatronInfo::release_timedone() {
  clear_has_timedone();
  if (timedone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timedone_;
    timedone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 pid = 11;
inline bool PatronInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PatronInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PatronInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PatronInfo::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 PatronInfo::pid() const {
  return pid_;
}
inline void PatronInfo::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// -------------------------------------------------------------------

// PatronList

// repeated .PatronInfo patron = 1;
inline int PatronList::patron_size() const {
  return patron_.size();
}
inline void PatronList::clear_patron() {
  patron_.Clear();
}
inline const ::PatronInfo& PatronList::patron(int index) const {
  return patron_.Get(index);
}
inline ::PatronInfo* PatronList::mutable_patron(int index) {
  return patron_.Mutable(index);
}
inline ::PatronInfo* PatronList::add_patron() {
  return patron_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PatronInfo >&
PatronList::patron() const {
  return patron_;
}
inline ::google::protobuf::RepeatedPtrField< ::PatronInfo >*
PatronList::mutable_patron() {
  return &patron_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_patron_2eproto__INCLUDED
